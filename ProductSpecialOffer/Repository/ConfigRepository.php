<?php

namespace Plugin\ProductSpecialOffer\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Eccube\Entity\Product;
use Eccube\Entity\Order;
use Eccube\Entity\OrderStatus;
use Eccube\Entity\OrderItem;
use Eccube\Entity\Customer;
use Eccube\Util\StringUtil;
use Eccube\Repository\AbstractRepository;
use Plugin\ProductSpecialOffer\Entity\Config;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfigRepository extends AbstractRepository
{
  /** 入金済み. */
  private $PAID = 6;
    /**
     * ConfigRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Config::class);
    }

    /**
     * @param int $id
     *
     * @return null|Config
     */
    public function get($id = 1)
    {
        return $this->find($id);
    }

    /**
     * Get RemainBuyers.
     *
     * @param Product $Product
     *
     * @return mixed
     */
    public function getRemainBuyers(Product $Product)
    {
        $default = [
            'customerId' => null,
            'specailOfferDay' => null,
            'pointOffer' => 0,
            'updateDate' => null,
            'flagSpecialOffer' => 0
        ];

        try {
          $defaults = $this->getEntityManager()
               ->createQuery(
                   'SELECT ord.id as orderId, cus.id as customerId, pro.days as specailOfferDay, pro.point_offer as pointOffer, pro.update_date as updateDate, pro.isFlag_special_offer as flagSpecialOffer
                   FROM Eccube\Entity\Order ord
                   JOIN ord.OrderItems ori
                   LEFT JOIN ord.Customer cus
                   JOIN ori.Product pro WHERE pro = :product AND pro.isFlag_special_offer = :isFlag_special_offer GROUP BY cus.id, ord.id'
               )
               ->setParameter('product', $Product)
               ->setParameter('isFlag_special_offer', 0)
               ->getResult();
        // get only total buyer
        $remain_buyer = $this->getEntityManager()
                    ->createQuery(
                        'SELECT count(ord.id) as remainBuyer
                        FROM Eccube\Entity\Order ord
                        JOIN ord.OrderItems ori
                        JOIN ord.OrderStatus ord_sta
                        LEFT JOIN ord.Customer cus
                        JOIN ori.Product pro WHERE pro = :product AND ord.OrderStatus = :order_status AND ord.Customer IS NOT NULL AND pro.isFlag_special_offer = :isFlag_special_offer  GROUP BY ord.id'
                    )
                    ->setParameter('product', $Product)
                    ->setParameter('order_status', $this->PAID)
                    ->setParameter('isFlag_special_offer', 0)
                    ->getResult();
            $remainBuyer = array('remainBuyer' => 0);
           if(count($remain_buyer) > 0) {
             $remainBuyer = $remain_buyer[0];
           }
           log_info('check on customer bought: ', ['count customer bought' => count($remainBuyer)]);
           if(count($defaults[0]) > 0) {
             return array_merge($defaults[0], $remainBuyer);
           }
           return array_merge($default, $remainBuyer);
        } catch (\Exception $exception) {
          log_info('Catch Exception :', ['getRemainBuyers' => $exception->getMessage()]);
          return $default;
        }
    }

    /**
     * 検索条件での検索を行う。
     *
     * @param array $searchData
     *
     * @return QueryBuilder
     */
    public function getProductSpecialOfferWasBoughtSearchList($searchData) {
      $defaults = [
          'id' => null,
          'productName' => null,
          'targetSell' => 0,
          'numBuyers' => 0,
          'specailOfferDay' => null,
          'updateDate' => null,
          'pointOffer' => null,
          'flagSpecialOffer' => 0
      ];

      try {

        //JOIN pro.ProductClasses pc
         $query = "SELECT count(distinct ord.Customer) as numBuyers, pro.id as id, pro.target_sell as targetSell, pro.days as specailOfferDay, pro.update_date as updateDate, pro.name as productName, pro.point_offer as pointOffer, pro.isFlag_special_offer as flagSpecialOffer
         FROM Eccube\Entity\Order ord
         JOIN ord.OrderItems ori
         JOIN ord.OrderStatus ord_sta
         JOIN ori.Product pro
         WHERE pro.target_sell IS NOT NULL AND ord.Customer IS NOT NULL AND ord.OrderStatus = ".$this->PAID;
;

         // 商品名
         if (isset($searchData['product_name']) && StringUtil::isNotBlank($searchData['product_name'])) {
           $product_name = '%'.str_replace('%', '\\%', $searchData['product_name']).'%';
           $query .= " AND pro.name LIKE :product_name ";
         }

         // 性別
         if (isset($searchData['target_sell']) && StringUtil::isNotBlank($searchData['target_sell'])) {
            $query .= " AND pro.target_sell =:target_sell ";
         }

         $query .= 'GROUP BY pro.id';
         $qb = $this->getEntityManager()->createQuery($query);

         if (isset($searchData['product_name']) && StringUtil::isNotBlank($searchData['product_name'])) {
          $qb->setParameter('product_name', '%'.str_replace('%', '\\%', $searchData['product_name']).'%');
         }
         if (isset($searchData['target_sell']) && StringUtil::isNotBlank($searchData['target_sell'])) {
           $qb->setParameter('target_sell', $searchData['target_sell']);
         }
        return $qb->getResult();
      } catch (\Exception $exception) {
          log_info('Catch Exception :', ['getProductSpecialOfferWasBoughtSearchList' => $exception->getMessage()]);
          return [];
      }
    }

    /**
     * Get RemainBuyers.
     *
     * @param $pro
     *
     * @return boolean
     */
    public function getUpdateCustomerPoint($product_id) {

      try {
        try {
          $customers = $this->getEntityManager()
               ->createQuery(
                   'SELECT distinct(cus.id) as customerId, pro.point_offer as pointOffer
                   FROM Eccube\Entity\Order ord JOIN ord.OrderItems ori
                   JOIN ord.OrderStatus ord_sta
                   LEFT JOIN ord.Customer cus
                   JOIN ori.Product pro WHERE pro.id = :product_id and cus.id is not null and ord.OrderStatus = :order_status_id'
               )
               ->setParameter('product_id', $product_id)
               ->setParameter('order_status_id', $this->PAID)
               ->getResult();
               //GROUP BY cus.id, ord.id
        } catch (\Exception $exception) {
            log_info('Catch Exception :', ['get customer was paid complement: ' => $exception->getMessage()]);
            return [];
        }
        $customersId = array();
        for($i = 0; $i < count($customers); $i++) {
          array_push($customersId, $customers[$i]['customerId']);
        }
        $point_offer = $customers[0]['pointOffer'];

        if(count($customersId)) {
          $em = $this->getEntityManager();
          $query = $em->getRepository(Customer::class)->createQueryBuilder('')
              ->update(Customer::class, 'cus')
              ->set('cus.point', 'cus.point + :point')
              ->setParameter('point', "$point_offer")
              ->where('cus.id IN (:ids)')
              ->setParameter('ids', $customersId)
              ->getQuery();
              $query->execute();
        }

        //update flag_special_offer to complete when match target
          $em = $this->getEntityManager();
          $query_complete = $em->getRepository(Product::class)->createQueryBuilder('')
              ->update(Product::class, 'pro')
              ->set('pro.isFlag_special_offer', '1')
              ->where('pro.id = :product_id')
              ->setParameter('product_id', $product_id)
              ->getQuery();
              $query_complete->execute();
              $result = array('customersId' => $customersId, 'productUpdated' => $query_complete);
              return $result;//$query_complete;

      } catch (\Exception $exception) {
          log_info('Catch Exception :', ['getUpdateCustomerPoint' => $exception->getMessage()]);
          return [];

      }
    }
}
